  MOVING AROUND COMMITS AND BRANCHES:
$ git checkout HEAD^                             --Moving HEAD one commit upwards
$ git checkout <name of branch or commit>        --Moving HEAD between branches and commits.
$ git branch -f master HEAD~3                    --Moving branch 3 coomints up
$ git branch -f master <commit>                  --Moving branch on speciied commit


  LISTING BRANCHES AND COMMITS
$ git log                                        --LIst of commit logs
$ git branch                                     --List of branches in current work directory
$ git git ls-files                               --List of files in local work directory
$ git ls-remote                                  --List of remote branches as well as more information.
$ git remote -v                                  --List your existing remotes in order to get the name of the remote you want to change.

  MERGING AND REBAISING
$ git merge                                      --Adding branch commits to the other branch
$ git cherry-pick <Commit1> <Commit2> <...>      --Method of combining work from chosen commits.
$ git rebase -i HEAD~<number of commits>         --This command o

"""If you want to merge project-a into project-b:"""
cd path/to/project-b
git remote add project-a path/to/project-a
git fetch project-a --tags
git merge --allow-unrelated-histories project-a/master # or whichever branch you want to merge
git remote remove project-a

$ git status--

  ADDING CHANGES TO WORKING DIRECTORY:
$ git branch <name of branch>                    --Adding new branch to repository
$ git add.
$ git add -A
$ git commit                                     --Creating coppy of changed file.
$ git push                                       --Save local commits in remote repository
$ git push --set-upstream origin <name>          --To push the current branch and set the remote as upstream
$ git pull                                       --Downloads commits from remote repository and UPDATES local.
$ git pull --rebase                              --Downloads commits from remote repository to local and creating new SEPERATE commit
$ git fetch                                      --Downloads commits from remote repository to local but NOT updayting local repository.
$ git clone                                      --Cloning local repository to github

  DELETING FROM WORKING DIRECTORY:
$ git push <remote_name> --delete <branch_name>  --Deleting remote branch
$ git rm -r -f <file name>                       --Removing file from workin directory
$ git rm --cached <file name>                    --Untracking file from working repo
$ git branch -d <branch name>                    --Removes local branch
$ git fetch -p                                   --Deletes local branches to match remote branches.
$ git remote prune origin                        --Deletes local branches to match remote branches.
  """After someone deletes a branch from a remote repository,
git will not automatically delete the local repository branches when
a user does a git pull or git fetch. However,
if the user would like to have all tracking branches removed
from their local repository that have been deleted in a remote repository,
they can type: git remote prune origin"""

  PROCEDURE FOR REMOVING FILE FROM WD:
1)$ git rm -r -f <file name>                     --Removing file from workin directory
2)$ git commit                                   --Creating coppy of changed file/branch
3)$ git push                                     --Save local commits in remote repository

  REMOTE REPOSITORRY
origin/master                                    --Remote branch represented in local working directory.
git branch -u orgin/master <branch>              --Setting up conections between local branch and remote master
git branch -u orgin/master                       --If branch is "checkout" setting up conections between local branch and remote master.
git push orgin master                            --Pushing local master to remote without HEAD on local master


  PROCEDURE FOR UPDATING REMOTE REPOSITORY
1)$git checkout <branch>
2)$git pull
3)$git cherry-pick <commits>
4)$git push


git revert <commit ref>                          --Is used to revert in remote repository
git reset  <commit ref>                          --Is used to reset changes in local repository




git rebase -i master~<Numbers of commits>
git commit --amend
git rebase -i master~<Numbers of commits>

note!!!
"""the behavior of GIT PUSH with no arguments varies depending on one of git's s
 ettings called push.default. The default value for this setting depends on the version of git you're using,
 but we are going to use the upstream value in our lessons. This isn't a huge deal,
 but it's worth checking your settings before pushing in your own projects."""
